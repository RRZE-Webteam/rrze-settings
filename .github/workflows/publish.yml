name: Publish

on:
    pull_request:
        types: [closed] # Only when a PR is closed
        branches:
            - main # ...and the base branch is main

permissions:
    contents: write # Required to create tags and releases

jobs:
    publish:
        # Ensure the PR was actually merged (not just closed)
        if: github.event.pull_request.merged == true
        runs-on: ubuntu-latest

        steps:
            - name: Checkout the merge commit
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  # Use the actual merge commit SHA for reproducible releases
                  ref: ${{ github.event.pull_request.merge_commit_sha }}

            - name: Ensure jq is installed
              shell: bash
              run: |
                  if ! command -v jq >/dev/null 2>&1; then
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi

            - name: Read plugin version from header (rrze-settings.php)
              id: meta
              shell: bash
              run: |
                  plugin_file="rrze-settings.php"
                  if [ ! -f "$plugin_file" ]; then
                    echo "‚ùå Plugin file '$plugin_file' not found."
                    exit 1
                  fi

                  # Extract semantic version from plugin header
                  version=$(grep -oP 'Version:\s*\K[0-9]+\.[0-9]+\.[0-9]+' "$plugin_file" || true)
                  if [ -z "$version" ]; then
                    echo "‚ùå Version not found in plugin header."
                    exit 1
                  fi

                  # Make version available to later shell steps
                  echo "version=$version" >> "$GITHUB_ENV"
                  # Make version available to GitHub Expressions context (steps.meta.outputs.version)
                  echo "version=$version" >> "$GITHUB_OUTPUT"

                  echo "‚úÖ Detected version: $version"

                  # Optional consistency check with package.json (do not modify files on main here)
                  if [ -f package.json ]; then
                    pkg_version=$(jq -r '.version // empty' package.json)
                    if [ -n "$pkg_version" ] && [ "$pkg_version" != "$version" ]; then
                      echo "‚ùå package.json version ($pkg_version) does not match plugin header version ($version)"
                      exit 1
                    fi
                  fi

            - name: Check if tag already exists
              id: tag
              shell: bash
              run: |
                  git fetch --tags
                  if git show-ref --tags --quiet --verify -- "refs/tags/${{ steps.meta.outputs.version }}"; then
                    echo "exists=true" >> "$GITHUB_OUTPUT"
                    echo "‚ö†Ô∏è Tag ${{ steps.meta.outputs.version }} already exists."
                  else
                    echo "exists=false" >> "$GITHUB_OUTPUT"
                  fi

            - name: Create GitHub Release
              if: steps.tag.outputs.exists == 'false'
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: "${{ steps.meta.outputs.version }}"
                  release_name: "v${{ steps.meta.outputs.version }}"
                  draft: false
                  prerelease: false

            - name: Verify release creation
              if: steps.tag.outputs.exists == 'false' && steps.create_release.outputs.id == ''
              shell: bash
              run: |
                  echo "‚ùå Release creation failed."
                  exit 1

            - name: Send Matrix notification
              if: steps.tag.outputs.exists == 'false'
              env:
                  MATRIX_ACCESS_TOKEN: ${{ secrets.MATRIX_ACCESS_TOKEN }}
                  MATRIX_ROOM_ID: "%21wyUpkRsFMDGzzGmxBf%3Afau.de" # HTML-encoded room ID
              run: |
                  response=$(curl -s -o /dev/null -w "%{http_code}" -X POST "https://matrix.fau.de/_matrix/client/r0/rooms/${MATRIX_ROOM_ID}/send/m.room.message?access_token=${MATRIX_ACCESS_TOKEN}" \
                    -H "Content-Type: application/json" \
                    -d "{
                      \"msgtype\": \"m.text\",
                      \"body\": \"New release created for ${GITHUB_REPOSITORY} by ${GITHUB_ACTOR}. üéâ\"
                    }")
                  if [ "$response" -ne 200 ]; then
                    echo "Error: Failed to send notification to Matrix. HTTP status code: $response"
                  fi
